//
// Generated file, do not edit! Created by nedtool 5.6 from mPacket.msg.
//

#ifndef __MPACKET_M_H
#define __MPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>mPacket.msg:18</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * // 
 * //
 * // TODO generated message class
 * //
 * packet mPacket
 * {
 *     string SMD;
 *     int MAC_DID;
 *     int MAC_SID;
 *     string Payload;
 *     int fragCount;
 *     int Size;
 * }
 * </pre>
 */
class mPacket : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string SMD;
    int MAC_DID;
    int MAC_SID;
    ::omnetpp::opp_string Payload;
    int fragCount;
    int Size;

  private:
    void copy(const mPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const mPacket&);

  public:
    mPacket(const char *name=nullptr, short kind=0);
    mPacket(const mPacket& other);
    virtual ~mPacket();
    mPacket& operator=(const mPacket& other);
    virtual mPacket *dup() const override {return new mPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSMD() const;
    virtual void setSMD(const char * SMD);
    virtual int getMAC_DID() const;
    virtual void setMAC_DID(int MAC_DID);
    virtual int getMAC_SID() const;
    virtual void setMAC_SID(int MAC_SID);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * Payload);
    virtual int getFragCount() const;
    virtual void setFragCount(int fragCount);
    virtual int getSize() const;
    virtual void setSize(int Size);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const mPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, mPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MPACKET_M_H

